/*
 *		Don_Corley@msn.com
 * Copyright Â© 2011 jbundle.org. All rights reserved.
 */
package org.jbundle.terminal.control.remote;

import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

import org.jbundle.util.apprunner.*;
import org.jbundle.terminal.*;
import org.jbundle.terminal.control.*;
import org.jbundle.terminal.control.serial.*;
import org.jbundle.terminal.model.*;
import org.jbundle.terminal.view.*;

/**
 * RemoteControl - This class is a simple extension to the base ScreenControl which
 * allows optionally allows an RmiControl to connect and pass characters to the overriding control.
 * Generally, Every Control should extend this class rather than ScreenControl to get Rmi Server support.
 */
public class RemoteControl extends ScreenControl
{
	protected boolean m_bRmiServerRunning = false;
	
	protected RemoteControlServer m_server = null;

	/**
	 * Constructor.
	 */
	public RemoteControl()
	{
		super();
	}
	/**
	 * Constructor.
	 */
	public RemoteControl(BaseModel screenModel, Properties properties)
	{
		this();
		this.init(screenModel, properties);
	}
	/**
	 * Constructor.
	 */
	public void init(BaseModel screenModel, Properties properties)
	{
		super.init(screenModel, properties);
	}
	/*
	 * Free the resources.
	 */
	public void free()
	{
		super.free();
	}
	/**
	 * Reset this control up to implement these new properties.
	 */
	public void setProperties(Properties properties)
	{
		if ("true".equalsIgnoreCase(properties.getProperty(RemoteControlPropertyView.CONTROL_SERVER)))
		{	// Bring up the RMI server if it isn't up already
			if (!m_bRmiServerRunning)
			{
				try	{
					m_server = new RemoteControlServer(this, properties);
					new Thread(m_server).start();
					// Note: There are some concurrency issues here that I ignore - there will rarely be a problem
					m_bRmiServerRunning = true;
				} catch (java.rmi.RemoteException ex)	{
					ex.printStackTrace();
				}
			}
		}
		else
		{	// pend(don) How do I shut this thing down?
		}
		super.setProperties(properties);
	}
	/**
	 * Screen that is used to change the properties.
	 */
	public PropertyView getPropertyView(Properties properties)
	{
		return new RemoteControlPropertyView(this, properties);
	}
	/**
	 * Create a listener for this control.
	 */
	public org.jbundle.terminal.model.ScreenKeyHandler createKeyListener(BaseControl screenControl)
	{
	    return null;
	}
	/**
	 * Send this character to the model.
	 * ie., The character was received from the physical control... pass it on.
	 */
	public void sendCharToModel(char chChar)
	{	// Override this to send characters
		if (m_server != null)
			m_server.sendCharToControl(chChar);
		super.sendCharToModel(chChar);
	}
	/**
	 * Handles the KeyEvent.
	 * Gets the <code>char</char> generated by the <code>KeyEvent</code>,
	 * converts it to an <code>int</code>, writes it to the <code>
	 * OutputStream</code> for the port.
	 */
	public void sendCharToControl(char chChar)
	{
		super.sendCharToControl(chChar);
	}
}
